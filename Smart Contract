pragma solidity ^0.8.0;

contract SimpleGame {
    address public owner;
    mapping(address => uint) public playerBalances;

    event GamePlayed(address indexed player, uint256 reward);

    constructor() {
        owner = msg.sender;
    }

    function playGame() public payable {
        require(msg.value == 0.01 ether, "Entry fee is 0.01 ETH");
        uint randomNumber = uint(keccak256(abi.encodePacked(block.timestamp, msg.sender))) % 10;
        if (randomNumber > 5) {
            uint reward = msg.value * 2;
            playerBalances[msg.sender] += reward;
            emit GamePlayed(msg.sender, reward);
        }
    }

    function withdrawBalance() public {
        uint balance = playerBalances[msg.sender];
        require(balance > 0, "No balance to withdraw");
        playerBalances[msg.sender] = 0;
        payable(msg.sender).transfer(balance);
    }

    function withdrawAll() public {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        payable(owner).transfer(address(this).balance);
    }
}
